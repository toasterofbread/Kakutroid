extends KinematicBody2D
class_name Player

# - Signals -
signal STATE_CHANGED(previous_state)
signal DATA_CHANGED() # TODO

# - Enums -
enum STATE { NONE, NEUTRAL, WALK, RUN, JUMP, SLIDE }
enum UPGRADE { WALLJUMP, MORPH_CUBE, MORPH_TRIANGLE, MORPH_CIRCLE }
enum AREA { MAIN }

# - Constants -
const SHAPE_UPGRADES: Dictionary = {
	Enums.SHAPE.CUBE: UPGRADE.MORPH_CUBE,
	Enums.SHAPE.TRIANGLE: UPGRADE.MORPH_TRIANGLE,
	Enums.SHAPE.CIRCLE: UPGRADE.MORPH_CIRCLE,
}

# - Export vars -
export var debug_mode: bool = false
export var ghost: bool = false

# - Modules -
var module_demo: Node = null
var module_input: Node = null
var module_physics: Node = null

# - Nodes -
onready var crouch_tween: Tween = $CrouchTween
onready var shape_transition_tween: Tween = $ShapeTransitionTween
onready var wall_squeeze_animationplayer: AnimationPlayer = $WallSqueezeAnimationPlayer
onready var trail_emitter: NodeTrailEmitter = $NodeTrailEmitter
onready var landing_particles: CPUParticles2D = $LandingParticles
onready var intangibility_timer: Timer = $IntangibilityTimer
onready var wind_sprite: AnimatedSprite = $WindSprite
onready var camera: ControlledCamera2D = $Camera
onready var area_main: ExPhysicsBodyArea2D = $MainArea
onready var edge_collisionshapes: Node = $Edges

# - Variables -
var states: Dictionary = {}
var current_state: Node = null
var facing: int = 1
var crouching: bool = false setget set_crouching
var running: bool = false setget set_running
var fast_falling: bool = null setget set_fast_falling
var physics_frame: int = 0
var paused: bool = null
export var background: bool = false setget set_background

# - Data -
var data: Dictionary = Utils.load_json("res://data/player/default.json").result
var player_data: Dictionary = data["general"]
var save_data: Dictionary = null

# - Shape -
const SHAPE_TRANSITION_DURATION: float = 0.5
onready var shape_data: Dictionary = {
	Enums.SHAPE.CUBE: {"node": $Shapes/Square},
	Enums.SHAPE.TRIANGLE: {"node": $Shapes/Triangle},
	Enums.SHAPE.CIRCLE: {"node": $Shapes/Circle},
}
var current_shape: int = null setget set_current_shape
var current_shape_node: CollisionShape2D = null

# - Scenes -
const projectile_scene: PackedScene = preload("res://src/scenes/player/Projectile.tscn")

# - Other -
const CUBE_SIZE: int = 16
const WALL_SQUEEZE_AMOUNT: float = 0.25
const CROUCH_SQUEEZE_AMOUNT: float = 0.25
const CUBE_TEXTURE: Texture = preload("res://assets/temp/white.png")
var squeeze_amount_x: float = 0.0 setget set_squeeze_amount_x
var squeeze_amount_y: float = 0.0 setget set_squeeze_amount_y
onready var gradient: Gradient = $Shapes/Square/Polygon.texture.gradient
var last_damage_time: int = 0.0
var passive_heal_cap: float
var low_health_sound_wait_time: float = 0.0

# - Public function declarations -
func change_state(_state_id: int, _data: Dictionary = {}):
	return
func wall_collided(_direction: int, _strong: bool = false):
	return
func fire_weapon(_direction: int = facing):
	return
func is_squeezing_wall() -> bool:
	return null
func emit_landing_particles(_texture_or_colour, _amount: int = 3) -> CPUParticles2D:
	return null
func get_state_data(_state_id: int) -> Dictionary:
	return null
func collect_upgrade(_upgrade_type: int):
	return
func play_sound(_sound_key: String):
	return
func is_sound_playing(_sound_key: String):
	return
func play_wind_animation(_falling_only: bool = false):
	return
func using_upgrade(_upgrade: int) -> bool:
	return null
func get_upgrade_amount(_upgrade: int) -> int:
	return null
static func is_upgrade_unique(upgrade: int) -> bool:
	return upgrade in [UPGRADE.WALLJUMP]
func is_paused() -> bool:
	return null
func camerachunk_entered(_chunk: Node):
	pass
func camerachunk_exited(_chunk: Node):
	pass
func get_player_layer() -> int:
	return null
func get_world_mask() -> int:
	return null

# - Setter declarations -
func set_health(_value: float):
	return
func set_intangible(_value: bool):
	return
func set_crouching(_value: bool):
	return
func set_running(_value: bool):
	return
func set_fast_falling(_value: bool):
	return
func set_current_shape(_value: int):
	return
func set_squeeze_amount_x(_value: float):
	return
func set_squeeze_amount_y(_value: float):
	return
func set_background(_value: bool):
	return
